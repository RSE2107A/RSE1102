{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Your ROS 2 and Pixy2 Project Documentation \u00b6 This site provides step-by-step instructions and setup guides for your embedded and robotic system development, including: \ud83d\udce6 Contents \u00b6 \ud83d\udee0\ufe0f Ubuntu 24.04 Installation for Raspberry Pi \ud83c\udf10 ROS2 Jazzy Installation \u2705 Pixy2 Camera Setup : Installing PixyMon, building demos, and enabling Python integration. \u2699\ufe0f UART Configuration : Setting up UART on Raspberry Pi for Pixy2 communication. \ud83e\udde0 ROS 2 Workspace : Building and sourcing your ROS 2 workspace.","title":"Home"},{"location":"#welcome-to-your-ros-2-and-pixy2-project-documentation","text":"This site provides step-by-step instructions and setup guides for your embedded and robotic system development, including:","title":"Welcome to Your ROS 2 and Pixy2 Project Documentation"},{"location":"#contents","text":"\ud83d\udee0\ufe0f Ubuntu 24.04 Installation for Raspberry Pi \ud83c\udf10 ROS2 Jazzy Installation \u2705 Pixy2 Camera Setup : Installing PixyMon, building demos, and enabling Python integration. \u2699\ufe0f UART Configuration : Setting up UART on Raspberry Pi for Pixy2 communication. \ud83e\udde0 ROS 2 Workspace : Building and sourcing your ROS 2 workspace.","title":"\ud83d\udce6 Contents"},{"location":"UART/","text":"\ud83d\udd0c UART Setup on Raspberry Pi \u00b6 These steps help you enable and use UART (serial communication) on a Raspberry Pi (or similar Linux SBC). \ud83d\udcdd 1. Edit Configuration File \u00b6 Open the boot configuration file: sudo gedit /boot/firmware/config.txt Add the following at the end of the file (after [all] section): enable_uart = 1 dtoverlay = disable-bt enable_uart=1 : Enables the UART serial interface. dtoverlay=disable-bt : Disables Bluetooth, which uses the primary UART on some Pi models. \ud83d\udc64 2. Add User to dialout Group \u00b6 sudo usermod -aG dialout $USER This allows your user account to access serial ports (e.g. /dev/ttyS0 , /dev/ttyUSB0 ). You must log out and log in again (or reboot) for the changes to apply. \ud83d\udd04 3. Reboot the Raspberry Pi \u00b6 sudo reboot Reboots the system to apply your changes. \u2705 4. After Reboot \u00b6 UART should now be available at /dev/ttyAMA0 .","title":"UART Setup"},{"location":"UART/#uart-setup-on-raspberry-pi","text":"These steps help you enable and use UART (serial communication) on a Raspberry Pi (or similar Linux SBC).","title":"\ud83d\udd0c UART Setup on Raspberry Pi"},{"location":"UART/#1-edit-configuration-file","text":"Open the boot configuration file: sudo gedit /boot/firmware/config.txt Add the following at the end of the file (after [all] section): enable_uart = 1 dtoverlay = disable-bt enable_uart=1 : Enables the UART serial interface. dtoverlay=disable-bt : Disables Bluetooth, which uses the primary UART on some Pi models.","title":"\ud83d\udcdd 1. Edit Configuration File"},{"location":"UART/#2-add-user-to-dialout-group","text":"sudo usermod -aG dialout $USER This allows your user account to access serial ports (e.g. /dev/ttyS0 , /dev/ttyUSB0 ). You must log out and log in again (or reboot) for the changes to apply.","title":"\ud83d\udc64 2. Add User to dialout Group"},{"location":"UART/#3-reboot-the-raspberry-pi","text":"sudo reboot Reboots the system to apply your changes.","title":"\ud83d\udd04 3. Reboot the Raspberry Pi"},{"location":"UART/#4-after-reboot","text":"UART should now be available at /dev/ttyAMA0 .","title":"\u2705 4. After Reboot"},{"location":"pixy2_installation/","text":"\ud83d\udce6 Pixy2 Installation Instructions (Linux) \u00b6 \ud83d\udd17 Downloads: \u00b6 Official Page: https://pixycam.com/downloads-pixy2/ GitHub Repository: https://github.com/charmedlabs/pixy2 Installing PixyMon on Linux Make sure you install this, otherwide your pixy2 will not work : https://docs.pixycam.com/wiki/doku.php?id=wiki:v2:installing_pixymon_on_linux \u2699\ufe0f System Dependencies \u00b6 Install required Qt5 and SWIG packages: sudo apt-get update sudo apt-get install qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools sudo apt-get install swig \ud83d\udc0d Set Python 3 as Default \u00b6 sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 1 \ud83d\udee0\ufe0f Build Demos and Libraries \u00b6 \ud83d\udd39 Build Python Demos \u00b6 ./build_python_demos.sh \ud83d\udd39 (Optional) Build Everything \u00b6 ./build_all.sh \ud83e\udde0 Set Python Path for Pixy2 \u00b6 echo 'export PYTHONPATH=\"/home/pj/pixy2/build/python_demos:$PYTHONPATH\"' >> ~/.bashrc source ~/.bashrc Replace /home/pj/pixy2 with your actual Pixy2 repo path.","title":"Pixy2 Installation"},{"location":"pixy2_installation/#pixy2-installation-instructions-linux","text":"","title":"\ud83d\udce6 Pixy2 Installation Instructions (Linux)"},{"location":"pixy2_installation/#downloads","text":"Official Page: https://pixycam.com/downloads-pixy2/ GitHub Repository: https://github.com/charmedlabs/pixy2 Installing PixyMon on Linux Make sure you install this, otherwide your pixy2 will not work : https://docs.pixycam.com/wiki/doku.php?id=wiki:v2:installing_pixymon_on_linux","title":"\ud83d\udd17 Downloads:"},{"location":"pixy2_installation/#system-dependencies","text":"Install required Qt5 and SWIG packages: sudo apt-get update sudo apt-get install qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools sudo apt-get install swig","title":"\u2699\ufe0f System Dependencies"},{"location":"pixy2_installation/#set-python-3-as-default","text":"sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 1","title":"\ud83d\udc0d Set Python 3 as Default"},{"location":"pixy2_installation/#build-demos-and-libraries","text":"","title":"\ud83d\udee0\ufe0f Build Demos and Libraries"},{"location":"pixy2_installation/#build-python-demos","text":"./build_python_demos.sh","title":"\ud83d\udd39 Build Python Demos"},{"location":"pixy2_installation/#optional-build-everything","text":"./build_all.sh","title":"\ud83d\udd39 (Optional) Build Everything"},{"location":"pixy2_installation/#set-python-path-for-pixy2","text":"echo 'export PYTHONPATH=\"/home/pj/pixy2/build/python_demos:$PYTHONPATH\"' >> ~/.bashrc source ~/.bashrc Replace /home/pj/pixy2 with your actual Pixy2 repo path.","title":"\ud83e\udde0 Set Python Path for Pixy2"},{"location":"ros2_jazzy_installation/","text":"Installing ROS 2 Jazzy on Ubuntu (Binary Install) \u00b6 This tutorial explains how to install ROS 2 Jazzy on Ubuntu Linux using pre-built binary packages . Note The pre-built binary does not include all ROS 2 packages . - All packages in the ROS base variant are included. - Only a subset of packages from the ROS desktop variant are included. - For the full list, refer to the ros2.repos file. - DEB packages are also available. System Requirements \u00b6 ROS 2 Jazzy currently supports: Ubuntu Noble (24.04) Architectures: 64-bit x86 (amd64) 64-bit ARM (arm64) System Setup \u00b6 1. Set Locale \u00b6 Ensure your system locale supports UTF-8. locale # Check current locale settings sudo apt update && sudo apt install locales sudo locale-gen en_US en_US.UTF-8 sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 export LANG = en_US.UTF-8 locale # Verify that UTF-8 is enabled 2. Enable Required Repositories \u00b6 Enable Universe Repository \u00b6 sudo apt install software-properties-common sudo add-apt-repository universe Add ROS 2 APT Repository \u00b6 Install the ros2-apt-source package to automatically set up the ROS 2 repositories: sudo apt update && sudo apt install curl -y sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( . /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null sudo apt update Install ROS2 \u00b6 sudo apt install ros-jazzy-desktop-full sudo apt install ros-dev-tools source /opt/jazzy/setup.bash echo \"source /opt/ros/jazzy/setup.bash\" >> ~/.bashrc For testing installation: \u00b6 ros2 run turtlesim turtlesim_node More repository configuration steps will follow (e.g., importing GPG keys and installing ROS 2 packages). (This snippet ends here, but you can extend the markdown to include those as needed.)","title":"ROS2 Jazzy Installation"},{"location":"ros2_jazzy_installation/#installing-ros-2-jazzy-on-ubuntu-binary-install","text":"This tutorial explains how to install ROS 2 Jazzy on Ubuntu Linux using pre-built binary packages . Note The pre-built binary does not include all ROS 2 packages . - All packages in the ROS base variant are included. - Only a subset of packages from the ROS desktop variant are included. - For the full list, refer to the ros2.repos file. - DEB packages are also available.","title":"Installing ROS 2 Jazzy on Ubuntu (Binary Install)"},{"location":"ros2_jazzy_installation/#system-requirements","text":"ROS 2 Jazzy currently supports: Ubuntu Noble (24.04) Architectures: 64-bit x86 (amd64) 64-bit ARM (arm64)","title":"System Requirements"},{"location":"ros2_jazzy_installation/#system-setup","text":"","title":"System Setup"},{"location":"ros2_jazzy_installation/#1-set-locale","text":"Ensure your system locale supports UTF-8. locale # Check current locale settings sudo apt update && sudo apt install locales sudo locale-gen en_US en_US.UTF-8 sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 export LANG = en_US.UTF-8 locale # Verify that UTF-8 is enabled","title":"1. Set Locale"},{"location":"ros2_jazzy_installation/#2-enable-required-repositories","text":"","title":"2. Enable Required Repositories"},{"location":"ros2_jazzy_installation/#enable-universe-repository","text":"sudo apt install software-properties-common sudo add-apt-repository universe","title":"Enable Universe Repository"},{"location":"ros2_jazzy_installation/#add-ros-2-apt-repository","text":"Install the ros2-apt-source package to automatically set up the ROS 2 repositories: sudo apt update && sudo apt install curl -y sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( . /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null sudo apt update","title":"Add ROS 2 APT Repository"},{"location":"ros2_jazzy_installation/#install-ros2","text":"sudo apt install ros-jazzy-desktop-full sudo apt install ros-dev-tools source /opt/jazzy/setup.bash echo \"source /opt/ros/jazzy/setup.bash\" >> ~/.bashrc","title":"Install ROS2"},{"location":"ros2_jazzy_installation/#for-testing-installation","text":"ros2 run turtlesim turtlesim_node More repository configuration steps will follow (e.g., importing GPG keys and installing ROS 2 packages). (This snippet ends here, but you can extend the markdown to include those as needed.)","title":"For testing installation:"},{"location":"ros2_ws/","text":"ros2_ws Build and Source Instructions \u00b6 Follow the steps below to build and source your ROS 2 workspace: \ud83d\udce5 1. Download ros2_ws into Your Home Folder \u00b6 If you haven\u2019t cloned or created the ros2_ws yet, do that first. Then: cd ~/ros2_ws git clone ... \ud83d\udee0 2. Build the Workspace \u00b6 colcon build \ud83d\udd01 3. Source the Setup Script \u00b6 source install/setup.bash \u2705 This step ensures your ROS 2 environment is properly configured for the current terminal session. \ud83d\udd04 4. After Code Updates \u00b6 Any time you update the code in your package, you need to : colcon build source install/setup.bash \ud83d\udd27 colcon build \u2014 Compiles and Prepares Your Code \u00b6 In ROS 2, building your workspace is essential for changes to take effect. Why It's Necessary \u00b6 ROS 2 uses CMake (for C++) and the ament build system under the hood. When you run: colcon build You are doing the following: \ud83e\uddf1 Compiling your C++ source files \ud83d\udd17 Linking or copying Python scripts and launch files \ud83d\uddc2 Generating the install/ layout , which ROS 2 uses to resolve dependencies and locate packages \u26a0\ufe0f If you don\u2019t run colcon build , ROS 2 will not detect any of your new code, files, or updates. \ud83e\udde0 Important Note (Python Users Too!) \u00b6 Even if your project is written entirely in Python (which is not compiled), you still need to run colcon build . Here's why: It ensures that the install/ directory is properly updated. ROS 2 tools like ros2 run and ros2 launch look for packages in the install/ tree. \ud83d\udccc Summary \u00b6 Action Purpose colcon build Rebuilds your workspace, regenerates install layout source install/setup.bash Makes newly built packages available to ROS 2 commands After colcon build , always remember to: source install/setup.bash This activates your latest build and registers it with your current terminal session.","title":"ROS2 Workspace and Package"},{"location":"ros2_ws/#ros2_ws-build-and-source-instructions","text":"Follow the steps below to build and source your ROS 2 workspace:","title":"ros2_ws Build and Source Instructions"},{"location":"ros2_ws/#1-download-ros2_ws-into-your-home-folder","text":"If you haven\u2019t cloned or created the ros2_ws yet, do that first. Then: cd ~/ros2_ws git clone ...","title":"\ud83d\udce5 1. Download ros2_ws into Your Home Folder"},{"location":"ros2_ws/#2-build-the-workspace","text":"colcon build","title":"\ud83d\udee0 2. Build the Workspace"},{"location":"ros2_ws/#3-source-the-setup-script","text":"source install/setup.bash \u2705 This step ensures your ROS 2 environment is properly configured for the current terminal session.","title":"\ud83d\udd01 3. Source the Setup Script"},{"location":"ros2_ws/#4-after-code-updates","text":"Any time you update the code in your package, you need to : colcon build source install/setup.bash","title":"\ud83d\udd04 4. After Code Updates"},{"location":"ros2_ws/#colcon-build-compiles-and-prepares-your-code","text":"In ROS 2, building your workspace is essential for changes to take effect.","title":"\ud83d\udd27 colcon build \u2014 Compiles and Prepares Your Code"},{"location":"ros2_ws/#why-its-necessary","text":"ROS 2 uses CMake (for C++) and the ament build system under the hood. When you run: colcon build You are doing the following: \ud83e\uddf1 Compiling your C++ source files \ud83d\udd17 Linking or copying Python scripts and launch files \ud83d\uddc2 Generating the install/ layout , which ROS 2 uses to resolve dependencies and locate packages \u26a0\ufe0f If you don\u2019t run colcon build , ROS 2 will not detect any of your new code, files, or updates.","title":"Why It's Necessary"},{"location":"ros2_ws/#important-note-python-users-too","text":"Even if your project is written entirely in Python (which is not compiled), you still need to run colcon build . Here's why: It ensures that the install/ directory is properly updated. ROS 2 tools like ros2 run and ros2 launch look for packages in the install/ tree.","title":"\ud83e\udde0 Important Note (Python Users Too!)"},{"location":"ros2_ws/#summary","text":"Action Purpose colcon build Rebuilds your workspace, regenerates install layout source install/setup.bash Makes newly built packages available to ROS 2 commands After colcon build , always remember to: source install/setup.bash This activates your latest build and registers it with your current terminal session.","title":"\ud83d\udccc Summary"},{"location":"ubuntu24/","text":"\ud83d\udc27 Ubuntu 24.04 Installation for Raspberry Pi 4B and Above \u00b6 This guide will help you install Ubuntu 24.04 (Noble Numbat) on Raspberry Pi 4B, 400, or 5. \ud83e\uddf0 Requirements \u00b6 Raspberry Pi 4B, 400, or 5 microSD card (32GB+ recommended, Class 10 or UHS-1) SD card reader Computer with internet access USB keyboard and mouse HDMI monitor and cable \ud83d\udce5 Installation Instruction \u00b6 How to Install Ubuntu 24.04 LTS on Raspberry Pi Through Raspberry Pi Imager: \ud83d\udd17 https://greenwebpage.com/community/how-to-install-ubuntu-24-04-lts-on-raspberry-pi/ Go to the official Ubuntu download page: \ud83d\udd17 https://ubuntu.com/download/raspberry-pi After follwing instruction above, you can boot up your Raspberry Pi with your SD card inserted to the SD Card Port. Then, you can follow following set to install the Ubuntu System. Starting from item 4 at Once the installer has initialised, you are invited to choose your language. \ud83d\udd17 https://ubuntu.com/tutorials/install-ubuntu-desktop#4-boot-from-usb-flash-drive","title":"Ubuntu24.04 Installation"},{"location":"ubuntu24/#ubuntu-2404-installation-for-raspberry-pi-4b-and-above","text":"This guide will help you install Ubuntu 24.04 (Noble Numbat) on Raspberry Pi 4B, 400, or 5.","title":"\ud83d\udc27 Ubuntu 24.04 Installation for Raspberry Pi 4B and Above"},{"location":"ubuntu24/#requirements","text":"Raspberry Pi 4B, 400, or 5 microSD card (32GB+ recommended, Class 10 or UHS-1) SD card reader Computer with internet access USB keyboard and mouse HDMI monitor and cable","title":"\ud83e\uddf0 Requirements"},{"location":"ubuntu24/#installation-instruction","text":"How to Install Ubuntu 24.04 LTS on Raspberry Pi Through Raspberry Pi Imager: \ud83d\udd17 https://greenwebpage.com/community/how-to-install-ubuntu-24-04-lts-on-raspberry-pi/ Go to the official Ubuntu download page: \ud83d\udd17 https://ubuntu.com/download/raspberry-pi After follwing instruction above, you can boot up your Raspberry Pi with your SD card inserted to the SD Card Port. Then, you can follow following set to install the Ubuntu System. Starting from item 4 at Once the installer has initialised, you are invited to choose your language. \ud83d\udd17 https://ubuntu.com/tutorials/install-ubuntu-desktop#4-boot-from-usb-flash-drive","title":"\ud83d\udce5 Installation Instruction"}]}