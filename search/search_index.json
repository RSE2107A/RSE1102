{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"UART/","text":"\ud83d\udd0c UART Setup on Raspberry Pi \u00b6 These steps help you enable and use UART (serial communication) on a Raspberry Pi (or similar Linux SBC). \ud83d\udcdd 1. Edit Configuration File \u00b6 Open the boot configuration file: sudo gedit /boot/firmware/config.txt Add the following at the end of the file (after [all] section): enable_uart = 1 dtoverlay = disable-bt enable_uart=1 : Enables the UART serial interface. dtoverlay=disable-bt : Disables Bluetooth, which uses the primary UART on some Pi models. \ud83d\udc64 2. Add User to dialout Group \u00b6 sudo usermod -aG dialout $USER This allows your user account to access serial ports (e.g. /dev/ttyS0 , /dev/ttyUSB0 ). You must log out and log in again (or reboot) for the changes to apply. \ud83d\udd04 3. Reboot the Raspberry Pi \u00b6 sudo reboot Reboots the system to apply your changes. \u2705 4. After Reboot \u00b6 UART should now be available at /dev/ttyAMA0 . - Test using tools like: \u00b6 - minicom \u00b6 - screen \u00b6 - Python's pyserial \u00b6","title":"UART Setup"},{"location":"UART/#uart-setup-on-raspberry-pi","text":"These steps help you enable and use UART (serial communication) on a Raspberry Pi (or similar Linux SBC).","title":"\ud83d\udd0c UART Setup on Raspberry Pi"},{"location":"UART/#1-edit-configuration-file","text":"Open the boot configuration file: sudo gedit /boot/firmware/config.txt Add the following at the end of the file (after [all] section): enable_uart = 1 dtoverlay = disable-bt enable_uart=1 : Enables the UART serial interface. dtoverlay=disable-bt : Disables Bluetooth, which uses the primary UART on some Pi models.","title":"\ud83d\udcdd 1. Edit Configuration File"},{"location":"UART/#2-add-user-to-dialout-group","text":"sudo usermod -aG dialout $USER This allows your user account to access serial ports (e.g. /dev/ttyS0 , /dev/ttyUSB0 ). You must log out and log in again (or reboot) for the changes to apply.","title":"\ud83d\udc64 2. Add User to dialout Group"},{"location":"UART/#3-reboot-the-raspberry-pi","text":"sudo reboot Reboots the system to apply your changes.","title":"\ud83d\udd04 3. Reboot the Raspberry Pi"},{"location":"UART/#4-after-reboot","text":"UART should now be available at /dev/ttyAMA0 .","title":"\u2705 4. After Reboot"},{"location":"UART/#-test-using-tools-like","text":"","title":"- Test using tools like:"},{"location":"UART/#-minicom","text":"","title":"- minicom"},{"location":"UART/#-screen","text":"","title":"- screen"},{"location":"UART/#-pythons-pyserial","text":"","title":"- Python's pyserial"},{"location":"pixy2_installation/","text":"\ud83d\udce6 Pixy2 Installation Instructions (Linux) \u00b6 \ud83d\udd17 Downloads \u00b6 Official Page: https://pixycam.com/downloads-pixy2/ GitHub Repository: https://github.com/charmedlabs/pixy2 Installation Docs: Installing PixyMon on Linux \u2699\ufe0f System Dependencies \u00b6 Install required Qt5 and SWIG packages: sudo apt-get update sudo apt-get install qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools sudo apt-get install swig \ud83d\udc0d Set Python 3 as Default \u00b6 sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 1 \ud83d\udee0\ufe0f Build Demos and Libraries \u00b6 \ud83d\udd39 Build Python Demos \u00b6 ./build_python_demos.sh \ud83d\udd39 (Optional) Build Everything \u00b6 ./build_all.sh \ud83e\udde0 Set Python Path for Pixy2 \u00b6 echo 'export PYTHONPATH=\"/home/pj/pixy2/build/python_demos:$PYTHONPATH\"' >> ~/.bashrc source ~/.bashrc Replace /home/pj/pixy2 with your actual Pixy2 repo path.","title":"Pixy2 Installation"},{"location":"pixy2_installation/#pixy2-installation-instructions-linux","text":"","title":"\ud83d\udce6 Pixy2 Installation Instructions (Linux)"},{"location":"pixy2_installation/#downloads","text":"Official Page: https://pixycam.com/downloads-pixy2/ GitHub Repository: https://github.com/charmedlabs/pixy2 Installation Docs: Installing PixyMon on Linux","title":"\ud83d\udd17 Downloads"},{"location":"pixy2_installation/#system-dependencies","text":"Install required Qt5 and SWIG packages: sudo apt-get update sudo apt-get install qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools sudo apt-get install swig","title":"\u2699\ufe0f System Dependencies"},{"location":"pixy2_installation/#set-python-3-as-default","text":"sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 1","title":"\ud83d\udc0d Set Python 3 as Default"},{"location":"pixy2_installation/#build-demos-and-libraries","text":"","title":"\ud83d\udee0\ufe0f Build Demos and Libraries"},{"location":"pixy2_installation/#build-python-demos","text":"./build_python_demos.sh","title":"\ud83d\udd39 Build Python Demos"},{"location":"pixy2_installation/#optional-build-everything","text":"./build_all.sh","title":"\ud83d\udd39 (Optional) Build Everything"},{"location":"pixy2_installation/#set-python-path-for-pixy2","text":"echo 'export PYTHONPATH=\"/home/pj/pixy2/build/python_demos:$PYTHONPATH\"' >> ~/.bashrc source ~/.bashrc Replace /home/pj/pixy2 with your actual Pixy2 repo path.","title":"\ud83e\udde0 Set Python Path for Pixy2"},{"location":"ros2_jazzy_installation/","text":"Installing ROS 2 Jazzy on Ubuntu (Binary Install) \u00b6 This tutorial explains how to install ROS 2 Jazzy on Ubuntu Linux using pre-built binary packages . Note The pre-built binary does not include all ROS 2 packages . - All packages in the ROS base variant are included. - Only a subset of packages from the ROS desktop variant are included. - For the full list, refer to the ros2.repos file. - DEB packages are also available. System Requirements \u00b6 ROS 2 Jazzy currently supports: Ubuntu Noble (24.04) Architectures: 64-bit x86 (amd64) 64-bit ARM (arm64) System Setup \u00b6 1. Set Locale \u00b6 Ensure your system locale supports UTF-8. locale # Check current locale settings sudo apt update && sudo apt install locales sudo locale-gen en_US en_US.UTF-8 sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 export LANG = en_US.UTF-8 locale # Verify that UTF-8 is enabled 2. Enable Required Repositories \u00b6 Enable Universe Repository \u00b6 sudo apt install software-properties-common sudo add-apt-repository universe Add ROS 2 APT Repository \u00b6 Install the ros2-apt-source package to automatically set up the ROS 2 repositories: sudo apt update && sudo apt install curl -y sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( . /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null sudo apt update Install ROS2 \u00b6 sudo apt install ros-jazzy-desktop-full sudo apt install ros-dev-tools source /opt/jazzy/setup.bash echo \"source /opt/ros/jazzy/setup.bash\" >> ~/.bashrc For testing installation: \u00b6 ros2 run turtlesim turtlesim_node More repository configuration steps will follow (e.g., importing GPG keys and installing ROS 2 packages). (This snippet ends here, but you can extend the markdown to include those as needed.)","title":"Setup"},{"location":"ros2_jazzy_installation/#installing-ros-2-jazzy-on-ubuntu-binary-install","text":"This tutorial explains how to install ROS 2 Jazzy on Ubuntu Linux using pre-built binary packages . Note The pre-built binary does not include all ROS 2 packages . - All packages in the ROS base variant are included. - Only a subset of packages from the ROS desktop variant are included. - For the full list, refer to the ros2.repos file. - DEB packages are also available.","title":"Installing ROS 2 Jazzy on Ubuntu (Binary Install)"},{"location":"ros2_jazzy_installation/#system-requirements","text":"ROS 2 Jazzy currently supports: Ubuntu Noble (24.04) Architectures: 64-bit x86 (amd64) 64-bit ARM (arm64)","title":"System Requirements"},{"location":"ros2_jazzy_installation/#system-setup","text":"","title":"System Setup"},{"location":"ros2_jazzy_installation/#1-set-locale","text":"Ensure your system locale supports UTF-8. locale # Check current locale settings sudo apt update && sudo apt install locales sudo locale-gen en_US en_US.UTF-8 sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 export LANG = en_US.UTF-8 locale # Verify that UTF-8 is enabled","title":"1. Set Locale"},{"location":"ros2_jazzy_installation/#2-enable-required-repositories","text":"","title":"2. Enable Required Repositories"},{"location":"ros2_jazzy_installation/#enable-universe-repository","text":"sudo apt install software-properties-common sudo add-apt-repository universe","title":"Enable Universe Repository"},{"location":"ros2_jazzy_installation/#add-ros-2-apt-repository","text":"Install the ros2-apt-source package to automatically set up the ROS 2 repositories: sudo apt update && sudo apt install curl -y sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( . /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null sudo apt update","title":"Add ROS 2 APT Repository"},{"location":"ros2_jazzy_installation/#install-ros2","text":"sudo apt install ros-jazzy-desktop-full sudo apt install ros-dev-tools source /opt/jazzy/setup.bash echo \"source /opt/ros/jazzy/setup.bash\" >> ~/.bashrc","title":"Install ROS2"},{"location":"ros2_jazzy_installation/#for-testing-installation","text":"ros2 run turtlesim turtlesim_node More repository configuration steps will follow (e.g., importing GPG keys and installing ROS 2 packages). (This snippet ends here, but you can extend the markdown to include those as needed.)","title":"For testing installation:"}]}